#!/usr/bin/env python


import numpy as np


def get_cubic_grid(IOData, grid_buffer, grid_density):
    pmin = np.min(IOData.coordinates, axis=0) - grid_buffer
    pmax = np.max(IOData.coordinates, axis=0) + grid_buffer
    npts = ((pmax - pmin)*grid_density).astype(np.int64)
    origin = pmin
    Nx = npts[0]
    Ny = npts[1]
    Nz = npts[2]
    xy = 0.0
    xz = 0.0
    yx = 0.0
    yz = 0.0
    zx = 0.0
    zy = 0.0
    xrange  = np.linspace(pmin[0], pmax[0], npts[0])
    yrange  = np.linspace(pmin[1], pmax[1], npts[1])
    zrange  = np.linspace(pmin[2], pmax[2], npts[2])
    xx = xrange[1] - xrange[0]
    yy = yrange[1] - yrange[0]
    zz = zrange[1] - zrange[0]
    xyzgrid = np.zeros((Nx*Ny*Nz,3), dtype=np.float64)
    counter = 0
    for i in range(Nx):
        for j in range(Ny):
            for k in range(Nz):
                xyzgrid[counter, 0] = xrange[i]
                xyzgrid[counter, 1] = yrange[j]
                xyzgrid[counter, 2] = zrange[k]
                counter += 1
    spacings = np.array([[xx,xy,xz],[yx,yy,yz],[zx,zy,zz]], dtype=np.float64)
    return xyzgrid, origin, npts, spacings



def write_cube(outfile, IOData, data, origin, npts, spacings):
    natoms = IOData.coordinates.shape[0]
    assert origin.shape == (3,)
    with open(outfile, "w") as f:
        #header, comments
        f.write("Cube file generated by a program\n")
        f.write("Title card\n")
        #header 
        f.write("{} {} {} {}\n".format(natoms, origin[0], origin[1], origin[2]))
        #header, box info. N is number of points, ij is increments. Data for X/Y/Z axis
        f.write("{} {} {} {}\n".format(npts[0], spacings[0,0], spacings[0,1], spacings[0,2]))
        f.write("{} {} {} {}\n".format(npts[1], spacings[1,0], spacings[1,1], spacings[1,2]))
        f.write("{} {} {} {}\n".format(npts[2], spacings[2,0], spacings[2,1], spacings[2,2]))
        #header atoms
        for i in range(natoms):
            f.write("{} {} {} {} {}\n".format(IOData.numbers[i], IOData.pseudo_numbers[i],\
                IOData.coordinates[i,0], IOData.coordinates[i,1], IOData.coordinates[i,2]))
 
        #main data
        counter = 0 
        for i in range(npts[0]):
            for j in range(npts[1]):
                for k in range(npts[2]):
                    f.write("{:.6E} ".format(data[counter]))
                    counter += 1
                    if counter % 6 == 0:
                        f.write("\n")
        f.write("\n")
